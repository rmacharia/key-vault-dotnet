name: $(Date:yyyyMMdd)$(Rev:.r)

variables:
  - name: buildConfiguration
    value: 'Release'
  - name: keyVaultName
    value: 'rgvault254' # Your Key Vault name
  - name: targetDirectory
    value: 'C:\Apps\key-vault-app' # On-premise deployment path

trigger:
  branches:
    include:
      - main # Trigger on main branch commits
  paths:
    exclude:
      - README.md

stages:
- stage: Build
  displayName: 'Build & Test'
  jobs:
  - job: Build
    displayName: 'Build Application'
    pool:
      name: 'onprem-server-01' # Match your agent pool name
    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET 9.0 SDK'
      inputs:
        packageType: 'sdk'
        version: '9.0.x'

    - task: DotNetCoreCLI@2
      displayName: 'Restore NuGet Packages'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Build Solution'
      inputs:
        command: 'build'
        projects: '**/*.csproj'
        arguments: '--configuration $(buildConfiguration)'

    - task: DotNetCoreCLI@2
      displayName: 'Publish Artifacts'
      inputs:
        command: 'publish'
        projects: '**/key-vault-dotnet-core-quickstart.csproj' # Web app project
        arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)'
        publishWebProjects: false

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Build Artifacts'
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)'
        artifact: 'drop'
        publishLocation: 'pipeline'

- stage: Deploy
  displayName: 'Deploy to On-Premise'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - job: Deploy
    displayName: 'Deploy Application'
    pool:
      name: 'onprem-server-01' # Same agent pool
    steps:
    - download: current
      artifact: 'drop'
      displayName: 'Download Build Artifacts'

    - task: AzureKeyVault@2
      displayName: 'Fetch Key Vault Secrets'
      inputs:
        azureSubscription: 'Azure-Connection-Name' # Name of your Azure service connection
        KeyVaultName: '$(keyVaultName)'
        SecretsFilter: 'AppSecret' # Secret to fetch
        RunAsPreJob: false

    - task: PowerShell@2
      displayName: 'Deploy to On-Premise Server'
      inputs:
        targetType: 'filePath'
        filePath: '$(Pipeline.Workspace)/drop/deploy.ps1' # Path to deployment script
        arguments: > 
          -TargetDir '$(targetDirectory)' 
          -SecretValue '$(AppSecret)' # Injected secret from Key Vault
        pwsh: true